let testing = async (db, bodyP, res) => {
    //let bodyP = req.query;
    console.log(new Date(bodyP.date));
    console.log(bodyP.uid);
    console.log(bodyP.journeyId);

    const query = db.collection("appUserPrompts")
        .where("uid", "==", bodyP.uid)
        .where("userJourneyId", "==", bodyP.journeyId)
        .get();
    const queryHabits = await db.collection("appUserHabits")
        .where("uid", "==", bodyP.uid)
        .where("journeyId", "==", bodyP.journeyId)
        .get();
    const responseLs = [];
    const tst = [];

    query.then(data => {
        // var habitData;
        // if (!queryHabits.empty) {
        //     queryHabits.forEach(doc => { habitData = doc.data(); });
        // }
        console.log(queryHabits.empty);

        const docs = data.docs;
        docs.map((doc) => {
            responseLs.push(doc.data());
            console.log(doc.data());
        });

        responseLs.forEach((element) => {
            queryHabits.forEach((habitDoc) => {
                var habitData = habitDoc.data();
                console.log(habitData);

                if (element.bodyPrompts) {
                    tst.push(getPrompts("BODY", element.uid, habitPrompts.body, element.bodyPrompts, habitData?.bodyPropmts ?? {}));
                }
                else {
                    tst.push(createEmptyPrompt("BODY", element.uid));
                }

                if (element.mindPrompts) {
                    tst.push(getPrompts("MIND", element.uid, habitPrompts.mind, element.mindPrompts, habitData?.mindPrompts ?? {}));
                }
                else {
                    tst.push(createEmptyPrompt("MIND", element.uid));
                }

                if (element.soulPrompts) {
                    tst.push(getPrompts("SOUL", element.uid, habitPrompts.soul, element.soulPrompts, habitData?.soulPrompts ?? {}));
                }
                else {
                    tst.push(createEmptyPrompt("SOUL", element.uid));
                }
            });
        });
        res.send(tst);
    });

    //return tst;
}

module.exports.getJourneyDetails = testing;

let getPrompts = (actionSource, uid, habitPrompts, elementPrompts, habitData) => {
    const param = {};
    param.actionSource = actionSource;
    param.uid = uid;
    param.data = [];
    var props = Object.keys(habitPrompts);
    props.forEach((x) => {
      setHabitInFormat(param.data, actionSource.toLowerCase(), x, elementPrompts, habitData[x] ?? false);
    });
   
    return param;
  }

  let createEmptyPrompt = (actionSource, uid) => {
    const param = {};
    param.actionSource = actionSource;
    param.uid = uid;
    param.data = [];

    return param;
  }

  function setHabitInFormat(data, promptType, habitName, prompts, status) {
    if (habitName && prompts[habitName]) {
      var text = "";
      if (habitPrompts[promptType][habitName] == "")
        text = prompts[habitName];
      else
        text = habitPrompts[promptType][habitName].replace("{0}", prompts[habitName]);

      if (habitName == "cravingText")
        text = text.replace("{1}", prompts['cravingNumber']);

      if (habitName == 'spiritualactivity')
        text = text.replace("{1}", prompts['spiritualactivity']);
      
      if(habitName == 'nutritionNumber'){
        text = text.replace("{1}", prompts['nutritionStartTime']);
        text = text.replace("{2}", prompts['nutritionEndTime']);
      }

      data.push({ level: habitName, text: text, status: status });
    }
  }

  var habitPrompts = {
    body: {
      ////BODY Prompts
      strengthTrainingNumber: "I will do {0} sets/reps of strenth training daily",
      strengthTrainingCustomHabit: "",
      stretchingNumber: "I will do {0} minutes of stretching daily",
      stretchingCustomHabit: "",
      cardioNumber: "I will do {0} minutes of cardio daily (Bike, Run, Walk, Hike, Other)",
      cardioNumber2: "I will do {0} km or miles of cardio daily (Bike, Run, Walk, Hike, Other)",
      cardioNumberCustomHabit: "",
      nutritionNumber: "Intermitent Fasting - I will fast for {0} hours daily - Start Time {1}  End Time {2}",
      nutritionLiters: "Water - {0} liters per day",
      nutritionRestrictSpeci: "Restrict Specific Foods or Beverages {0}",
      nutritionCustomHabit: "",
      cravingText: "I will limit {0} to {1} times per day (0-19)", //cravingNumber{1}
      cravingConsume: "I will not consume {0} throughout my entire journey",
      cravingCustomHabit: "",
      sleepMgmntBeInBedBy: "I will be in bed by {0} each day",
      sleepMgmntWakeUpAt: "I will wake up at {0} each day",
      sleepMgmntHoursOfSleep: "I will get {0} hours of sleep",
      sleepMgmntCustomHabit: "",
    },
    mind: {
      ///MIND
      readingNumber: 'I will read for {0}  minutes per day',
      readingChapters: 'I will read for {0} chapters per day',
      readingCustomHabit: '',
      writingNumber: 'I will write for {0} minutes per day',
      writingCustomHabit: '',
      meditationNumber: 'I will meditate for {0} minutes per day',
      meditationCustomHabit: '',
      mindGamesText: 'I will complete a {0} mind game daily',
      mindGameCustomHabit: '',
      newLanguageNumber: 'I will practice for {0} minutes learning a new language daily',
      newLanguageCustomHabit: '',
      ///SOUL
    },
    soul: {
      spiritualactivity: 'I will {0} for {1} minutes a day ',//spritualityNumber{1}
      spiritualCustomHabit: '',
      meditaionNumber: 'I will meditate for {0} mintues per day',
      meditaionCustomHabit: '',
      naturalWalkNumber: 'I will walk in nature for {0} mintues per day',
      naturalWalkCustomHabit: '',
      gratitudeNumber: 'I will write in my gratitude journal {0} mintues per day',
      gratitudeCustomHabit: '',
      playMusicalInstrumentNumber: 'I will play/practice my instrument {0} minutes per day',
      playMusicalCustomText: "",
      stayConnectedInput: 'I will connect with {0} friend(s) or family members daily',
      stayConnectedCustomHabit: '',
      familyTimeNumber: 'I will spend {0} minutes a day with my (wife, husband, children, other)',
      familyTimeCustomHabit: '',
      mypassionNumber: 'I will spend {0} mintues a day on my passion project (AKA Side Hussle)',
      mypassionCustomHabit: '',
    }
  };